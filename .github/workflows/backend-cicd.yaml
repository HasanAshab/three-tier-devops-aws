name: Backend CI/CD pipeline
on:
  push:
    branches:
      - main
    paths:
      - 'src/backend/**'

  pull_request:
    branches:
      - main
    paths:
      - 'src/backend/**'

defaults:
  run:
    working-directory: src/backend

jobs:
  test:
    name: Run integration tests
    runs-on: ubuntu-latest
    services:
      db:
        image: mysql:8-oracle
        env:
          MYSQL_DATABASE: hobbie_backend_db_prod
          MYSQL_ROOT_PASSWORD: 1
        ports:
          - 3306:3306

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 11
          cache: maven

      - name: Run tests
        run: mvn test
        env:
          SPRING_DATASOURCE_URL: jdbc:mysql://localhost:3306/hobbie_backend_db_prod?allowPublicKeyRetrieval=true&useSSL=false&createDatabaseIfNotExist=true&useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=Europe/Paris
          SPRING_DATASOURCE_USERNAME: root
          SPRING_DATASOURCE_PASSWORD: 1

  lint:
    name: Run lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: super-linter/super-linter@v7
        env:
          DEFAULT_BRANCH: main
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VALIDATE_JAVA: true

  docker:
    name: Build and push docker image
    runs-on: ubuntu-latest
    needs: [test, lint]
    outputs:
      image_tag: ${{ steps.build-scan-push.outputs.image_tag }}
      image_tag_short: ${{ steps.build-scan-push.outputs.image_tag_short }}
      image_ref: ${{ steps.build-scan-push.outputs.image_ref }}
    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/actions/docker-build-scan-push
        id: build-scan-push
        with:
          suffix: backend
          registry: ghcr.io
          github_token: ${{ secrets.GITHUB_TOKEN }}

  deploy:
    name: Deploy to ECS
    runs-on: ubuntu-latest
    needs: [docker]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Download task definition
        run: |
          aws ecs describe-task-definition \
            --task-definition ${{ secrets.ECS_SERVICE_NAME }} \
            --query taskDefinition > task-definition.json

      - name: Update task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: backend
          image: ${{ needs.docker.outputs.image_ref }}

      - name: Deploy to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ secrets.ECS_SERVICE_NAME }}
          cluster: ${{ secrets.ECS_CLUSTER_NAME }}
          wait-for-service-stability: true
